#+title: Doom Emacs Config File
#+author: Naparajith T L (DrInfinite)
#+description: DrInfinite's Personal Doom Emacs Config
#+property: header-args :tangle config.el
#+options: toc:2

* TABLE OF CONTENTS :toc:
- [[#appearance][APPEARANCE]]
  - [[#font][FONT]]
  - [[#theme][THEME]]
  - [[#cursor][CURSOR]]
- [[#evil-mode-settings][EVIL MODE SETTINGS]]
- [[#org-mode-settings][ORG MODE SETTINGS]]
- [[#notes][NOTES]]

* APPEARANCE
** FONT
Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-symbol-font' -- for symbols
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:

Defining my system-wide font-faces

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Monaspace Neon" :size 14 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "Monaspace Neon Var" :size 14)
      doom-big-font (font-spec :family "Monaspace Neon" :size 24))
#+end_src

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

** THEME
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
(setq doom-theme 'doom-one)

Set global theme based on installed packages

#+begin_src emacs-lisp
(setq doom-theme 'catppuccin)
(setq catppuccin-flavor 'latte) ;; or 'latte, 'macchiato, or 'mocha
#+end_src

** CURSOR
Set the cursor as a block cursor for insert mode
#+begin_src emacs-lisp
(setq-default cursor-type 'box)
(setq evil-insert-state-cursor 'box)
#+end_src

* EVIL MODE SETTINGS
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

Enable relative line numbers

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

Enable coloured column at 80 characters

#+begin_src emacs-lisp
(setq-default fill-column 80)
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

* ORG MODE SETTINGS
If you use 'org' and don't want your org files in the default location below,
change 'org-directory'. It must be set before org loads!

#+begin_src emacs-lisp
(setq org-directory "~/Documents/org/")
#+end_src

Hide Org Mode formatting characters

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

Enable Org Bullets

#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

* NOTES
Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
